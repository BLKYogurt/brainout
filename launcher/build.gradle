apply plugin: "java"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.desertkun.brainout.Main"
project.ext.assetsDir = new File("../bin/launcher");

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task dist(type: Jar) {
    destinationDir = new File("bin/out/launcher")
    baseName = new File("brainout-launcher")
    version = null

    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

task bundle(type: Copy) {
    from('../bin/out/launcher')
    into('../bin/mac/BrainOut/BrainOut.app/Contents/MacOS/bin')
    include('*.jar')
}

dist.dependsOn classes
bundle.dependsOn dist

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}

import com.badlogic.gdx.tools.texturepacker.TexturePacker

task texturePacker {
    doLast {
        TexturePacker.process("data/contenteditor/textures/LAUNCHER", "bin/launcher/assets/textures", "LAUNCHER")
    }
}